[{"/home/bruno/Documentos/todo-list/src/index.js":"1","/home/bruno/Documentos/todo-list/src/App.js":"2","/home/bruno/Documentos/todo-list/src/ListCRUD.js":"3","/home/bruno/Documentos/todo-list/src/CRUD.js":"4"},{"size":153,"mtime":1610143479892,"results":"5","hashOfConfig":"6"},{"size":2223,"mtime":1610212369395,"results":"7","hashOfConfig":"6"},{"size":456,"mtime":1610204775088,"results":"8","hashOfConfig":"6"},{"size":3063,"mtime":1610204391108,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"7df2ip",{"filePath":"13","messages":"14","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"12"},"/home/bruno/Documentos/todo-list/src/index.js",[],["20","21"],"/home/bruno/Documentos/todo-list/src/App.js",["22","23"],"/home/bruno/Documentos/todo-list/src/ListCRUD.js",[],"/home/bruno/Documentos/todo-list/src/CRUD.js",["24","25","26"],"/**\n * Simple CRUD for learning\n */\nclass CRUD {\n    /** LocalStorage prefix */\n    prefix = 'crud_'\n    /** Default timeout simulating AJAX */\n    timeout = 200\n\n    /**\n     * Promise Timeout\n     * @param {Number} [time=200] time to wait\n     */\n    setTimeout = (time = this.timeout) => new Promise(resolve => setTimeout(resolve, time))\n    \n    /**\n     * Downloads the table\n     * @param {String} table name\n     * @returns {Object} table object, with counter and table name\n     */\n    async download(table) {\n        await this.setTimeout()\n\n        const item = localStorage.getItem(this.prefix + table)\n        return item ? JSON.parse(item) : { table, counter: 0, items: [] };\n    }\n\n    /**\n     * Persists a table\n     * @param {String} table name\n     * @param {Object} data table object\n     */\n    async upload(table, data) {\n        await this.setTimeout()\n\n        localStorage.setItem(this.prefix + table, JSON.stringify(data))\n    }\n\n    /**\n     * Gets all items from table\n     * @param {String} table name\n     * @returns {[Object]} array of items\n     */\n    async get(table) {\n        const { items } = await this.download(table)\n        return items\n    }\n\n    /**\n     * Gets one item of a table\n     * @param {String} table name\n     * @param {Number} id item ID\n     * @returns {Object} item found\n     */\n    async getSingle(table, id) {\n        const { items } = await this.download(table)\n        return items.find(item => item.id == id)\n    }\n\n    /**\n     * Add an item to the table\n     * @param {String} table name\n     * @param {Object} data item\n     * @returns {Object} item inserted\n     */\n    async post(table, data) {\n        let { items, counter, ...entry } = await this.download(table);\n        data = { ...data, id: counter }\n        items.push(data)\n        counter++\n        await this.upload(table, { ...entry, counter, items, })\n        return data\n    }\n\n    /**\n     * Updates an item\n     * @param {String} table name\n     * @param {Object} data Object containing id and fields to be updated\n     * @returns {Object} updated item\n     */\n    async put(table, data) {\n\n        const { items = [], ...entry } = await this.download(table)\n        const i = items.findIndex(item => item.id == data.id)\n        items[i] = { ...items[i], ...data }\n        await this.upload(table, { ...entry, items })\n        return items[i]\n    }\n\n    /**\n     * Deletes an item\n     * @param {String} table name\n     * @param {Object} id item ID\n     * @returns {Object} item removed\n     */\n    async delete(table, id) {\n        const { items = [], ...entry } = await this.download(table)\n        const i = items.findIndex(item => item.id == id)\n        const [removed] = items.splice(i, 1);\n        await this.upload(table, { ...entry, items })\n        return removed\n    }\n\n    /**\n     * Drops an table\n     * @param {String} table name\n     */\n    drop(table) {\n        localStorage.removeItem(table)\n    }\n\n    /**\n     * Clears the database.\n     */\n    clear() {\n        localStorage.clear()\n    }\n}\n\nexport default CRUD;",{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","severity":1,"message":"32","line":2,"column":41,"nodeType":"33","messageId":"34","endLine":2,"endColumn":48},{"ruleId":"31","severity":1,"message":"35","line":2,"column":120,"nodeType":"33","messageId":"34","endLine":2,"endColumn":126},{"ruleId":"36","severity":1,"message":"37","line":57,"column":43,"nodeType":"38","messageId":"39","endLine":57,"endColumn":45},{"ruleId":"36","severity":1,"message":"37","line":84,"column":51,"nodeType":"38","messageId":"39","endLine":84,"endColumn":53},{"ruleId":"36","severity":1,"message":"37","line":98,"column":51,"nodeType":"38","messageId":"39","endLine":98,"endColumn":53},"no-native-reassign",["40"],"no-negated-in-lhs",["41"],"no-unused-vars","'Divider' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]